// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component } from '@angular/core';
import { ProductService, Product } from '../../services/product.service'; // update path
import { CartService } from '../../services/cart.service'; // update path
import { NgFor, NgIf, NgClass } from '@angular/common';
import { RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-shop',
  standalone: true,
  imports: [NgFor, NgIf, NgClass, RouterLink, FormsModule],
  templateUrl: './shop.component.html'
})
export class ShopComponent {

  categories = ['All', 'Chocolate', 'Fruit', 'Classic', 'Special'];
  selectedCategory: string = 'All';
  sortBy: string = 'default';

  constructor(
    private productService: ProductService,
    private cartService: CartService
  ) {}

  get products(): Product[] {
    return this.productService.getProducts();
  }

  get filteredProducts(): Product[] {
    if (this.selectedCategory === 'All') return this.products;
    return this.products.filter(product => product.category === this.selectedCategory);
  }

  get sortedProducts(): Product[] {
    let sorted = [...this.filteredProducts];
    switch (this.sortBy) {
      case 'price-low':
        sorted.sort((a, b) => a.price - b.price); break;
      case 'price-high':
        sorted.sort((a, b) => b.price - a.price); break;
      case 'name':
        sorted.sort((a, b) => a.name.localeCompare(b.name)); break;
    }
    return sorted;
  }

  setSelectedCategory(category: string) { this.selectedCategory = category; }

  onSortChange(_: any) { /* UI only: method stub for select dropdown */ }

  addToCart(product: Product) {
    this.cartService.add({ id: product.id, name: product.name, price: product.price, qty: 1, image: product.mainImage });
  }

  isInCart(productId: number): boolean {
    return !!this.cartService.list().find(item => item.id === productId);
  }

  floor(num: number): number { return Math.floor(num); }
}
