// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component } from '@angular/core';
import { CartService, CartItem } from '../../services/cart.service'; // adjust path as needed
import { NgFor, NgIf } from '@angular/common';
import { RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  standalone: true,
  imports: [FormsModule, NgFor, NgIf, RouterLink]
})
export class CartComponent {
  // Items are retrieved from the service
  get items(): CartItem[] {
    return this.cartService.list();
  }

  constructor(private cartService: CartService) {}

  getTotalPrice(): number {
    return this.cartService.totalPrice();
  }
  getTotalItems(): number {
    return this.cartService.totalItems();
  }

  removeFromCart(id: number) {
    this.cartService.remove(id);
  }

  updateQuantity(id: number, newQty: number) {
    if (newQty > 0) {
      // Update qty via direct mutation of the CartService internal array
      const item = this.cartService.list().find(i => i.id === id);
      if (item) item.qty = newQty;
    } else {
      this.removeFromCart(id);
    }
  }

  clearCart() {
    this.cartService.clear();
  }

  checkout() {
    alert('Checkout logic!');
    // handle authentication & navigation here
  }
}
